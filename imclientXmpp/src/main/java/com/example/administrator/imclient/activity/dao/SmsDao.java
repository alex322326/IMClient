package com.example.administrator.imclient.activity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SMS.
*/
public class SmsDao extends AbstractDao<Sms, Long> {

    public static final String TABLENAME = "SMS";

    /**
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property From_id = new Property(1, String.class, "from_id", false, "FROM_ID");
        public final static Property From_nick = new Property(2, String.class, "from_nick", false, "FROM_NICK");
        public final static Property From_avatar = new Property(3, Integer.class, "from_avatar", false, "FROM_AVATAR");
        public final static Property Body = new Property(4, String.class, "body", false, "BODY");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Time = new Property(6, Long.class, "time", false, "TIME");
        public final static Property Status = new Property(7, String.class, "status", false, "STATUS");
        public final static Property Unread = new Property(8, String.class, "unread", false, "UNREAD");
        public final static Property Session_id = new Property(9, String.class, "session_id", false, "SESSION_ID");
        public final static Property Session_name = new Property(10, String.class, "session_name", false, "SESSION_NAME");
    };


    public SmsDao(DaoConfig config) {
        super(config);
    }
    
    public SmsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SMS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'FROM_ID' TEXT," + // 1: from_id
                "'FROM_NICK' TEXT," + // 2: from_nick
                "'FROM_AVATAR' INTEGER," + // 3: from_avatar
                "'BODY' TEXT," + // 4: body
                "'TYPE' TEXT," + // 5: type
                "'TIME' INTEGER," + // 6: time
                "'STATUS' TEXT," + // 7: status
                "'UNREAD' TEXT," + // 8: unread
                "'SESSION_ID' TEXT," + // 9: session_id
                "'SESSION_NAME' TEXT);"); // 10: session_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SMS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sms entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String from_id = entity.getFrom_id();
        if (from_id != null) {
            stmt.bindString(2, from_id);
        }
 
        String from_nick = entity.getFrom_nick();
        if (from_nick != null) {
            stmt.bindString(3, from_nick);
        }
 
        Integer from_avatar = entity.getFrom_avatar();
        if (from_avatar != null) {
            stmt.bindLong(4, from_avatar);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(5, body);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(7, time);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(8, status);
        }
 
        String unread = entity.getUnread();
        if (unread != null) {
            stmt.bindString(9, unread);
        }
 
        String session_id = entity.getSession_id();
        if (session_id != null) {
            stmt.bindString(10, session_id);
        }
 
        String session_name = entity.getSession_name();
        if (session_name != null) {
            stmt.bindString(11, session_name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sms readEntity(Cursor cursor, int offset) {
        Sms entity = new Sms( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // from_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // from_nick
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // from_avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // body
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // unread
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // session_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // session_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sms entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrom_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFrom_nick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFrom_avatar(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBody(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUnread(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSession_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSession_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sms entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sms entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
